/************************************************************************
 * This code was generated by a tool.                                   *
 * Please do not modify this file directly - modify Profiler.tt instead *
 ***********************************************************************/
using System;
using System.Diagnostics;

namespace ClrDebug
{
    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct ProcessID : IComparable, IEquatable<ProcessID>
    {
        public IntPtr Value { get; }

        public ProcessID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(ProcessID value) => value.Value;

        public static implicit operator ProcessID(IntPtr value) => new ProcessID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<ProcessID>((ulong) Value, value);

        public bool Equals(ProcessID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct AssemblyID : IComparable, IEquatable<AssemblyID>
    {
        public IntPtr Value { get; }

        public AssemblyID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(AssemblyID value) => value.Value;

        public static implicit operator AssemblyID(IntPtr value) => new AssemblyID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<AssemblyID>((ulong) Value, value);

        public bool Equals(AssemblyID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct AppDomainID : IComparable, IEquatable<AppDomainID>
    {
        public IntPtr Value { get; }

        public AppDomainID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(AppDomainID value) => value.Value;

        public static implicit operator AppDomainID(IntPtr value) => new AppDomainID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<AppDomainID>((ulong) Value, value);

        public bool Equals(AppDomainID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct ModuleID : IComparable, IEquatable<ModuleID>
    {
        public IntPtr Value { get; }

        public ModuleID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(ModuleID value) => value.Value;

        public static implicit operator ModuleID(IntPtr value) => new ModuleID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<ModuleID>((ulong) Value, value);

        public bool Equals(ModuleID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct ClassID : IComparable, IEquatable<ClassID>
    {
        public IntPtr Value { get; }

        public ClassID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(ClassID value) => value.Value;

        public static implicit operator ClassID(IntPtr value) => new ClassID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<ClassID>((ulong) Value, value);

        public bool Equals(ClassID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct ThreadID : IComparable, IEquatable<ThreadID>
    {
        public IntPtr Value { get; }

        public ThreadID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(ThreadID value) => value.Value;

        public static implicit operator ThreadID(IntPtr value) => new ThreadID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<ThreadID>((ulong) Value, value);

        public bool Equals(ThreadID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct ContextID : IComparable, IEquatable<ContextID>
    {
        public IntPtr Value { get; }

        public ContextID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(ContextID value) => value.Value;

        public static implicit operator ContextID(IntPtr value) => new ContextID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<ContextID>((ulong) Value, value);

        public bool Equals(ContextID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct FunctionID : IComparable, IEquatable<FunctionID>
    {
        public IntPtr Value { get; }

        public FunctionID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(FunctionID value) => value.Value;

        public static implicit operator FunctionID(IntPtr value) => new FunctionID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<FunctionID>((ulong) Value, value);

        public bool Equals(FunctionID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct ObjectID : IComparable, IEquatable<ObjectID>
    {
        public IntPtr Value { get; }

        public ObjectID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(ObjectID value) => value.Value;

        public static implicit operator ObjectID(IntPtr value) => new ObjectID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<ObjectID>((ulong) Value, value);

        public bool Equals(ObjectID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct GCHandleID : IComparable, IEquatable<GCHandleID>
    {
        public IntPtr Value { get; }

        public GCHandleID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(GCHandleID value) => value.Value;

        public static implicit operator GCHandleID(IntPtr value) => new GCHandleID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<GCHandleID>((ulong) Value, value);

        public bool Equals(GCHandleID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct COR_PRF_ELT_INFO : IComparable, IEquatable<COR_PRF_ELT_INFO>
    {
        public IntPtr Value { get; }

        public COR_PRF_ELT_INFO(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(COR_PRF_ELT_INFO value) => value.Value;

        public static implicit operator COR_PRF_ELT_INFO(IntPtr value) => new COR_PRF_ELT_INFO(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<COR_PRF_ELT_INFO>((ulong) Value, value);

        public bool Equals(COR_PRF_ELT_INFO other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct COR_PRF_FRAME_INFO : IComparable, IEquatable<COR_PRF_FRAME_INFO>
    {
        public IntPtr Value { get; }

        public COR_PRF_FRAME_INFO(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(COR_PRF_FRAME_INFO value) => value.Value;

        public static implicit operator COR_PRF_FRAME_INFO(IntPtr value) => new COR_PRF_FRAME_INFO(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<COR_PRF_FRAME_INFO>((ulong) Value, value);

        public bool Equals(COR_PRF_FRAME_INFO other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct ReJITID : IComparable, IEquatable<ReJITID>
    {
        public IntPtr Value { get; }

        public ReJITID(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(ReJITID value) => value.Value;

        public static implicit operator ReJITID(IntPtr value) => new ReJITID(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<ReJITID>((ulong) Value, value);

        public bool Equals(ReJITID other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct EVENTPIPE_PROVIDER : IComparable, IEquatable<EVENTPIPE_PROVIDER>
    {
        public IntPtr Value { get; }

        public EVENTPIPE_PROVIDER(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(EVENTPIPE_PROVIDER value) => value.Value;

        public static implicit operator EVENTPIPE_PROVIDER(IntPtr value) => new EVENTPIPE_PROVIDER(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<EVENTPIPE_PROVIDER>((ulong) Value, value);

        public bool Equals(EVENTPIPE_PROVIDER other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct EVENTPIPE_EVENT : IComparable, IEquatable<EVENTPIPE_EVENT>
    {
        public IntPtr Value { get; }

        public EVENTPIPE_EVENT(IntPtr value)
        {
            Value = value;
        }

        public static implicit operator IntPtr(EVENTPIPE_EVENT value) => value.Value;

        public static implicit operator EVENTPIPE_EVENT(IntPtr value) => new EVENTPIPE_EVENT(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<EVENTPIPE_EVENT>((ulong) Value, value);

        public bool Equals(EVENTPIPE_EVENT other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq}")]
    public struct EVENTPIPE_SESSION : IComparable, IEquatable<EVENTPIPE_SESSION>
    {
        public long Value { get; }

        public EVENTPIPE_SESSION(long value)
        {
            Value = value;
        }

        public static implicit operator long(EVENTPIPE_SESSION value) => value.Value;

        public static implicit operator EVENTPIPE_SESSION(long value) => new EVENTPIPE_SESSION(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo<EVENTPIPE_SESSION>((ulong) Value, value);

        public bool Equals(EVENTPIPE_SESSION other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }
}