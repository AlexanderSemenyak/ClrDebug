using System.Collections;
using System.Collections.Generic;

namespace ClrDebug
{
    /// <summary>
    /// Provides methods to sequentially iterate through a collection of frozen objects that are generated by the Ngen.exe (Native Image Generator).
    /// </summary>
    /// <remarks>
    /// The ICorProfilerObjectEnum interface is an enumerator. It allows the receiver of an array to pull elements from
    /// the sender at a rate that is appropriate for the receiver. In other words, the receiver is able to explicitly control
    /// the flow of array elements, thereby avoiding the problems related to passing large arrays as method parameters.
    /// Use <see cref="CorProfilerInfo.EnumModuleFrozenObjects"/> to obtain a pointer to the ICorProfilerObjectEnum interface.
    /// </remarks>
    public class CorProfilerObjectEnum : IEnumerable<ObjectID>, IEnumerator<ObjectID>
    {
        private ICorProfilerObjectEnum rawEnumerator;

        /// <summary>
        /// Initializes a new instance of the <see cref="CorProfilerObjectEnum"/> class.
        /// </summary>
        /// <param name="rawEnumerator">The raw COM interface that should be contained in this object.</param>
        public CorProfilerObjectEnum(ICorProfilerObjectEnum rawEnumerator)
        {
            this.rawEnumerator = rawEnumerator;
        }

        public void Reset()
        {
            if (rawEnumerator == null)
                return;

            rawEnumerator.Reset();
            Current = default(ObjectID);
        }

        public CorProfilerObjectEnum Clone()
        {
            if (rawEnumerator == null)
                return this;

            ICorProfilerObjectEnum clone;
            rawEnumerator.Clone(out clone);

            return new CorProfilerObjectEnum(clone);
        }

        #region IEnumerable

        public IEnumerator<ObjectID> GetEnumerator() => this;

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        #endregion
        #region IEnumerator

        public ObjectID Current { get; private set; }

        object IEnumerator.Current => Current;

        public bool MoveNext()
        {
            if (rawEnumerator == null)
                return false;

            int fetched;
            ObjectID result;
            var hr = rawEnumerator.Next(1, out result, out fetched);

            if (fetched == 1)
                Current = result;

            return fetched == 1;
        }

        public void Dispose()
        {
        }

        #endregion
    }
}
