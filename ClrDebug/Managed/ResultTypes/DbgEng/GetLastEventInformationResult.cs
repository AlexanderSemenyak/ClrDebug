using System.Diagnostics;

namespace ClrDebug.DbgEng
{
    /// <summary>
    /// Encapsulates the results of the <see cref="DebugControl.LastEventInformation"/> property.
    /// </summary>
    [DebuggerDisplay("Type = {Type.ToString(),nq}, ProcessId = {ProcessId}, ThreadId = {ThreadId}, ExtraInformation = {ExtraInformation.ToString(),nq}, Description = {Description}")]
    public struct GetLastEventInformationResult
    {
        /// <summary>
        /// Receives the type of the last event generated by the target. For a list of possible types, see DEBUG_EVENT_XXX.
        /// </summary>
        public DEBUG_EVENT_TYPE Type { get; }

        /// <summary>
        /// Receives the process ID of the process in which the event occurred. If this information is not available, DEBUG_ANY_ID will be returned instead.
        /// </summary>
        public int ProcessId { get; }

        /// <summary>
        /// Receives the thread index (not the thread ID) of the thread in which the last event occurred. If this information is not available, DEBUG_ANY_ID will be returned instead.
        /// </summary>
        public int ThreadId { get; }

        /// <summary>
        /// Receives extra information about the event. The contents of this extra information depends on the type of the event.<para/>
        /// If ExtraInformation is NULL, this information is not returned.
        /// </summary>
        public DEBUG_LAST_EVENT_INFO ExtraInformation { get; }

        /// <summary>
        /// Receives the description of the event. If Description is NULL, this information is not returned.
        /// </summary>
        public string Description { get; }

        public GetLastEventInformationResult(DEBUG_EVENT_TYPE type, int processId, int threadId, DEBUG_LAST_EVENT_INFO extraInformation, string description)
        {
            Type = type;
            ProcessId = processId;
            ThreadId = threadId;
            ExtraInformation = extraInformation;
            Description = description;
        }
    }
}
